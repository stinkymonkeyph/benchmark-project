import express, { Request, Response, NextFunction } from 'express';
import sqlite3 from 'sqlite3';
import { open, Database } from 'sqlite';
import cors from 'cors';

// Types
interface Item {
  name: string;
  description?: string;
  price: number;
}

interface ItemResponse {
  id: number;
  name: string;
  description?: string;
  price: number;
  created_at: string;
}

interface EchoRequest {
  message: string;
  data?: any;
}

interface EchoResponse {
  message: string;
  data?: any;
  timestamp: string;
  processing_time_ms: number;
}

interface HealthResponse {
  status: string;
  timestamp: string;
  database: string;
}

interface CpuStressResponse {
  iterations: number;
  result: number;
  processing_time_ms: number;
  timestamp: string;
}

interface MemoryStressResponse {
  allocated_bytes: number;
  allocated_mb: number;
  processing_time_ms: number;
  timestamp: string;
}

// Database setup with optimizations
let db: Database;

async function resetDatabase(): Promise<void> {
  try {
    // Close existing connection if any
    if (db) {
      await db.close();
    }
  } catch (error) {
    // Ignore close errors
  }

  // Delete the database file to start fresh
  const fs = require('fs');
  try {
    fs.unlinkSync('benchmark.db');
    fs.unlinkSync('benchmark.db-wal');
    fs.unlinkSync('benchmark.db-shm');
  } catch (error) {
    // Files might not exist, ignore
  }
}

async function initDatabase(): Promise<void> {
  db = await open({
    filename: 'benchmark.db',
    driver: sqlite3.Database
  });

  // SQLite performance optimizations - WITHOUT WAL mode to avoid transaction conflicts
  await db.exec(`
    PRAGMA journal_mode = DELETE;
    PRAGMA synchronous = NORMAL;
    PRAGMA cache_size = 64000;
    PRAGMA temp_store = memory;
    PRAGMA mmap_size = 268435456;
    PRAGMA foreign_keys = OFF;
  `);

  // Create table
  await db.exec(`
    CREATE TABLE IF NOT EXISTS items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      price REAL NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // Create indexes for better query performance
  await db.exec(`
    CREATE INDEX IF NOT EXISTS idx_items_created_at ON items(created_at);
    CREATE INDEX IF NOT EXISTS idx_items_name ON items(name);
    CREATE INDEX IF NOT EXISTS idx_items_price ON items(price);
  `);

  // Optimize SQLite query planner
  await db.exec('PRAGMA optimize');

  // Insert sample data if table is empty
  const count = await db.get('SELECT COUNT(*) as count FROM items');
  if (count.count === 0) {
    const sampleItems = [
      ['Laptop', 'High-performance laptop', 999.99],
      ['Mouse', 'Wireless mouse', 29.99],
      ['Keyboard', 'Mechanical keyboard', 79.99]
    ];

    for (const [name, description, price] of sampleItems) {
      await db.run(
        'INSERT INTO items (name, description, price) VALUES (?, ?, ?)',
        [name, description, price]
      );
    }
  }
}

// Middleware to add processing time
const addProcessTimeHeader = (req: Request, res: Response, next: NextFunction) => {
  const startTime = process.hrtime.bigint();

  // Store the original json and send methods
  const originalJson = res.json;
  const originalSend = res.send;

  // Override json method
  res.json = function (body?: any) {
    const endTime = process.hrtime.bigint();
    const processingTime = Number(endTime - startTime) / 1000000;
    this.setHeader('X-Process-Time', processingTime.toString());
    return originalJson.call(this, body);
  };

  // Override send method
  res.send = function (body?: any) {
    const endTime = process.hrtime.bigint();
    const processingTime = Number(endTime - startTime) / 1000000;
    this.setHeader('X-Process-Time', processingTime.toString());
    return originalSend.call(this, body);
  };

  next();
};

// Utility functions
const getCurrentTimestamp = (): string => {
  return new Date().toISOString();
};

const sleep = (ms: number): Promise<void> => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

// Express app setup with optimizations
const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' })); // Increased limit for potential bulk operations
app.use(addProcessTimeHeader);

// Disable X-Powered-By header for security
app.disable('x-powered-by');

// Basic endpoints
app.get('/', (req: Request, res: Response) => {
  res.json({
    Hello: 'World',
    timestamp: getCurrentTimestamp()
  });
});

app.get('/items/:itemId', (req: Request, res: Response) => {
  const itemId = parseInt(req.params.itemId);
  const q = req.query.q as string;

  res.json({
    item_id: itemId,
    q: q || null,
    timestamp: getCurrentTimestamp()
  });
});

// Health check
app.get('/health', async (req: Request, res: Response) => {
  try {
    await db.get('SELECT 1');
    const response: HealthResponse = {
      status: 'healthy',
      timestamp: getCurrentTimestamp(),
      database: 'connected'
    };
    res.json(response);
  } catch (error) {
    const response: HealthResponse = {
      status: 'healthy',
      timestamp: getCurrentTimestamp(),
      database: 'disconnected'
    };
    res.json(response);
  }
});

// Echo endpoints
app.post('/echo', async (req: Request, res: Response) => {
  const startTime = process.hrtime.bigint();
  const echoRequest: EchoRequest = req.body;

  // Simulate some processing time
  await sleep(1);

  const endTime = process.hrtime.bigint();
  const processingTime = Number(endTime - startTime) / 1000000;

  const response: EchoResponse = {
    message: echoRequest.message,
    data: echoRequest.data,
    timestamp: getCurrentTimestamp(),
    processing_time_ms: processingTime
  };

  res.json(response);
});

app.get('/echo/:message', async (req: Request, res: Response) => {
  const startTime = process.hrtime.bigint();
  const message = req.params.message;

  await sleep(1);

  const endTime = process.hrtime.bigint();
  const processingTime = Number(endTime - startTime) / 1000000;

  res.json({
    message,
    timestamp: getCurrentTimestamp(),
    processing_time_ms: processingTime
  });
});

// Database CRUD operations - OPTIMIZED

app.get('/db/items', async (req: Request, res: Response) => {
  try {
    // Optimized query with simpler ORDER BY for better performance
    const rows = await db.all(`
      SELECT id, name, description, price, created_at 
      FROM items 
      ORDER BY id
    `);

    const items: ItemResponse[] = rows.map(row => ({
      id: row.id,
      name: row.name,
      description: row.description,
      price: row.price,
      created_at: row.created_at
    }));

    res.json(items);
  } catch (error) {
    console.error('Database error in /db/items:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

app.get('/db/items/:itemId', async (req: Request, res: Response): Promise<void> => {
  try {
    const itemId = parseInt(req.params.itemId);

    if (isNaN(itemId)) {
      res.status(400).json({ error: 'Invalid item ID' });
      return;
    }

    const row = await db.get(`
      SELECT id, name, description, price, created_at 
      FROM items WHERE id = ?
    `, [itemId]);

    if (!row) {
      res.status(404).json({ error: 'Item not found' });
      return;
    }

    const item: ItemResponse = {
      id: row.id,
      name: row.name,
      description: row.description,
      price: row.price,
      created_at: row.created_at
    };

    res.json(item);
  } catch (error) {
    console.error('Database error in /db/items/:itemId:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

app.post('/db/items', async (req: Request, res: Response) => {
  try {
    const item: Item = req.body;

    // Input validation
    if (!item.name || typeof item.name !== 'string' || item.name.trim() === '') {
      res.status(400).json({ error: 'Name is required and must be a non-empty string' });
      return;
    }

    if (typeof item.price !== 'number' || item.price < 0) {
      res.status(400).json({ error: 'Price must be a non-negative number' });
      return;
    }

    // Use a transaction for consistency
    await db.exec('BEGIN TRANSACTION');

    try {
      const result = await db.run(`
        INSERT INTO items (name, description, price) 
        VALUES (?, ?, ?)
      `, [item.name.trim(), item.description, item.price]);

      const newItem = await db.get(`
        SELECT id, name, description, price, created_at 
        FROM items WHERE id = ?
      `, [result.lastID]);

      await db.exec('COMMIT');

      const response: ItemResponse = {
        id: newItem.id,
        name: newItem.name,
        description: newItem.description,
        price: newItem.price,
        created_at: newItem.created_at
      };

      res.status(201).json(response);
    } catch (error) {
      await db.exec('ROLLBACK');
      throw error;
    }
  } catch (error) {
    console.error('Database error in POST /db/items:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

app.put('/db/items/:itemId', async (req: Request, res: Response): Promise<void> => {
  try {
    const itemId = parseInt(req.params.itemId);
    const item: Item = req.body;

    if (isNaN(itemId)) {
      res.status(400).json({ error: 'Invalid item ID' });
      return;
    }

    // Input validation
    if (!item.name || typeof item.name !== 'string' || item.name.trim() === '') {
      res.status(400).json({ error: 'Name is required and must be a non-empty string' });
      return;
    }

    if (typeof item.price !== 'number' || item.price < 0) {
      res.status(400).json({ error: 'Price must be a non-negative number' });
      return;
    }

    // Use a transaction
    await db.exec('BEGIN TRANSACTION');

    try {
      // Check if item exists
      const existing = await db.get('SELECT id FROM items WHERE id = ?', [itemId]);
      if (!existing) {
        await db.exec('ROLLBACK');
        res.status(404).json({ error: 'Item not found' });
        return;
      }

      // Update the item
      await db.run(`
        UPDATE items 
        SET name = ?, description = ?, price = ? 
        WHERE id = ?
      `, [item.name.trim(), item.description, item.price, itemId]);

      // Get the updated item
      const updatedItem = await db.get(`
        SELECT id, name, description, price, created_at 
        FROM items WHERE id = ?
      `, [itemId]);

      await db.exec('COMMIT');

      const response: ItemResponse = {
        id: updatedItem.id,
        name: updatedItem.name,
        description: updatedItem.description,
        price: updatedItem.price,
        created_at: updatedItem.created_at
      };

      res.json(response);
    } catch (error) {
      await db.exec('ROLLBACK');
      throw error;
    }
  } catch (error) {
    console.error('Database error in PUT /db/items/:itemId:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

app.delete('/db/items/:itemId', async (req: Request, res: Response): Promise<void> => {
  try {
    const itemId = parseInt(req.params.itemId);

    if (isNaN(itemId)) {
      res.status(400).json({ error: 'Invalid item ID' });
      return;
    }

    // Check if item exists first (without transaction)
    const existing = await db.get('SELECT id FROM items WHERE id = ?', [itemId]);
    if (!existing) {
      res.status(404).json({ error: 'Item not found' });
      return;
    }

    // Delete the item (SQLite handles this atomically)
    await db.run('DELETE FROM items WHERE id = ?', [itemId]);

    res.json({
      message: `Item ${itemId} deleted successfully`
    });
  } catch (error) {
    console.error('Database error in DELETE /db/items/:itemId:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

// Stress test endpoints
app.get('/stress/cpu/:iterations', (req: Request, res: Response) => {
  const startTime = process.hrtime.bigint();
  const iterations = parseInt(req.params.iterations);

  if (isNaN(iterations) || iterations < 0) {
    res.status(400).json({ error: 'Invalid iterations parameter' });
    return;
  }

  // CPU intensive task
  let result = 0;
  for (let i = 0; i < iterations; i++) {
    result += i * i;
  }

  const endTime = process.hrtime.bigint();
  const processingTime = Number(endTime - startTime) / 1000000;

  const response: CpuStressResponse = {
    iterations,
    result,
    processing_time_ms: processingTime,
    timestamp: getCurrentTimestamp()
  };

  res.json(response);
});

app.get('/stress/memory/:sizeMb', (req: Request, res: Response): void => {
  const startTime = process.hrtime.bigint();
  const sizeMb = parseInt(req.params.sizeMb);

  if (isNaN(sizeMb) || sizeMb < 0) {
    res.status(400).json({ error: 'Invalid size parameter' });
    return;
  }

  if (sizeMb > 100) {
    res.status(400).json({ error: 'Size too large, max 100MB' });
    return;
  }

  // Allocate memory
  const sizeBytes = sizeMb * 1024 * 1024;
  const buffer = Buffer.alloc(sizeBytes);
  const allocatedBytes = buffer.length;

  // Clean up immediately
  buffer.fill(0);

  const endTime = process.hrtime.bigint();
  const processingTime = Number(endTime - startTime) / 1000000;

  const response: MemoryStressResponse = {
    allocated_bytes: allocatedBytes,
    allocated_mb: sizeMb,
    processing_time_ms: processingTime,
    timestamp: getCurrentTimestamp()
  };

  res.json(response);
});

// Error handling middleware
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error('Unhandled error:', err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler
app.use((req: Request, res: Response) => {
  res.status(404).json({ error: 'Not found' });
});

// Start server
async function startServer() {
  try {
    // Reset database to avoid transaction issues
    // await resetDatabase(); // Uncomment this line if you want to reset DB on startup

    await initDatabase();
    console.log('Database initialized successfully');

    const server = app.listen(PORT, () => {
      console.log(`🚀 Node.js TypeScript server running on http://0.0.0.0:${PORT}`);
    });

    // Set keep-alive timeout for better performance under load
    server.keepAliveTimeout = 65000;
    server.headersTimeout = 66000;

  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  console.log(`\n${signal} received. Shutting down gracefully...`);

  try {
    if (db) {
      await db.close();
      console.log('Database connection closed.');
    }
  } catch (error) {
    console.error('Error during graceful shutdown:', error);
  }

  process.exit(0);
};

process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Handle uncaught exceptions and rejections
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

startServer();
